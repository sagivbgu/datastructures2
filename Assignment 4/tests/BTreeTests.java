public class BTreeTests {
    public static void main(String[] args) {
        mergeLastChildTest();
        mergeLeftSiblingTest();
        insertAndDeleteTest();
        insertAndDeleteAllTree();
        deleteTest1();
        deleteTest2();
    }

    public static void mergeLastChildTest() {
        BTree btree = new BTree("2");
        BTreeNode n1 = new BTreeNode(2);
        n1.setValue(0, "01");
        n1.setNumOfKeys(1);
        BTreeNode n3 = new BTreeNode(2);
        n3.setValue(0, "03");
        n3.setNumOfKeys(1);
        BTreeNode n5 = new BTreeNode(2);
        n5.setValue(0, "05");
        n5.setNumOfKeys(1);
        BTreeNode n7 = new BTreeNode(2);
        n7.setValue(0, "07");
        n7.setNumOfKeys(1);
        BTreeNode n2 = new BTreeNode(2);
        n2.setValue(0, "02");
        n2.setValue(1, "04");
        n2.setValue(2, "06");
        n2.setChild(0, n1);
        n2.setChild(1, n3);
        n2.setChild(2, n5);
        n2.setChild(3, n7);
        n2.setNumOfKeys(3);
        btree.root = n2;
        btree.delete(btree.root, "07");
        assert btree.toString().equals("01_1,02_0,03_1,04_0,05_1,06_1");
    }

    public static void mergeLeftSiblingTest() {
        BTree btree = new BTree("2");
        BTreeNode n1 = new BTreeNode(2);
        n1.setValue(0, "01");
        n1.setNumOfKeys(1);
        BTreeNode n3 = new BTreeNode(2);
        n3.setValue(0, "03");
        n3.setNumOfKeys(1);
        BTreeNode n5 = new BTreeNode(2);
        n5.setValue(0, "05");
        n5.setNumOfKeys(1);
        BTreeNode n7 = new BTreeNode(2);
        n7.setValue(0, "07");
        n7.setNumOfKeys(1);
        BTreeNode n2 = new BTreeNode(2);
        n2.setValue(0, "02");
        n2.setValue(1, "04");
        n2.setValue(2, "06");
        n2.setChild(0, n1);
        n2.setChild(1, n3);
        n2.setChild(2, n5);
        n2.setChild(3, n7);
        n2.setNumOfKeys(3);
        btree.root = n2;
        btree.delete(btree.root, "05");
        assert btree.toString().equals("01_1,02_0,03_1,04_1,06_0,07_1");
    }

    public static void insertAndDeleteAllTree() {
        BTree btree = new BTree("2");
        btree.insert("A");
        assert btree.toString().equals("a_0");
        btree.insert("B");
        assert btree.toString().equals("a_0,b_0");
        btree.insert("C");
        assert btree.toString().equals("a_0,b_0,c_0");
        btree.insert("D");
        assert btree.toString().equals("a_1,b_0,c_1,d_1");
        btree.delete(btree.root, "B");
        assert btree.toString().equals("a_1,c_0,d_1");
        btree.delete(btree.root, "A");
        assert btree.toString().equals("c_0,d_0");
        btree.delete(btree.root, "D");
        assert btree.toString().equals("c_0");
        btree.delete(btree.root, "C");
        assert btree.toString().equals("");
        btree.delete(btree.root, "C");
        assert btree.toString().equals("");
        btree.insert("A");
        assert btree.toString().equals("a_0");
        btree.insert("B");
        assert btree.toString().equals("a_0,b_0");
        btree.insert("C");
        assert btree.toString().equals("a_0,b_0,c_0");
        btree.insert("D");
        assert btree.toString().equals("a_1,b_0,c_1,d_1");
        btree.delete(btree.root, "B");
        assert btree.toString().equals("a_1,c_0,d_1");
    }

    public static void insertAndDeleteTest() {
        BTree btree = new BTree("2");
        btree.insert("A");
        assert btree.toString().equals("a_0");
        btree.insert("B");
        assert btree.toString().equals("a_0,b_0");
        btree.insert("C");
        assert btree.toString().equals("a_0,b_0,c_0");
        btree.insert("D");
        assert btree.toString().equals("a_1,b_0,c_1,d_1");
        btree.insert("G");
        assert btree.toString().equals("a_1,b_0,c_1,d_1,g_1");
        btree.insert("H");
        assert btree.toString().equals("a_1,b_0,c_1,d_0,g_1,h_1");
        btree.insert("K");
        assert btree.toString().equals("a_1,b_0,c_1,d_0,g_1,h_1,k_1");
        btree.insert("M");
        assert btree.toString().equals("a_1,b_0,c_1,d_0,g_1,h_0,k_1,m_1");
        btree.insert("R");
        assert btree.toString().equals("a_2,b_1,c_2,d_0,g_2,h_1,k_2,m_2,r_2");
        btree.insert("W");
        assert btree.toString().equals("a_2,b_1,c_2,d_0,g_2,h_1,k_2,m_1,r_2,w_2");
        btree.insert("Z");
        assert btree.toString().equals("a_2,b_1,c_2,d_0,g_2,h_1,k_2,m_1,r_2,w_2,z_2");
        btree.delete(btree.root, "G");
        assert !btree.search(btree.root, "G");
        assert btree.toString().equals("a_2,b_1,c_2,d_0,h_2,k_2,m_1,r_2,w_2,z_2");
        btree.delete(btree.root, "M");
        assert !btree.search(btree.root, "M");
        assert btree.toString().equals("a_1,b_0,c_1,d_0,h_1,k_0,r_1,w_1,z_1");
    }

    public static void deleteTest1() {
        BTreeNode n2 = new BTreeNode(3);
        n2.setValue(0, "02");
        n2.setValue(1, "07");
        n2.setValue(2, "09");
        n2.setNumOfKeys(3);
        BTreeNode n15 = new BTreeNode(3);
        n15.setValue(0, "15");
        n15.setValue(1, "22");
        n15.setNumOfKeys(2);
        BTreeNode n31 = new BTreeNode(3);
        n31.setValue(0, "31");
        n31.setValue(1, "43");
        n31.setNumOfKeys(2);
        BTreeNode n56 = new BTreeNode(3);
        n56.setValue(0, "56");
        n56.setValue(1, "69");
        n56.setNumOfKeys(2);
        BTreeNode n12 = new BTreeNode(3);
        n12.setValue(0, "12");
        n12.setValue(1, "29");
        n12.setValue(2, "52");
        n12.setChild(0, n2);
        n12.setChild(1, n15);
        n12.setChild(2, n31);
        n12.setChild(3, n56);
        n12.setNumOfKeys(3);
        BTree btree = new BTree("3");
        btree.root = n12;
        assert btree.toString().equals("02_1,07_1,09_1,12_0,15_1,22_1,29_0,31_1,43_1,52_0,56_1,69_1");
        assert btree.search(btree.root, "12");
        assert btree.search(btree.root, "29");
        assert btree.search(btree.root, "52");
        assert btree.search(btree.root, "56");
        assert btree.search(btree.root, "69");
        assert btree.search(btree.root, "31");
        assert btree.search(btree.root, "43");
        assert btree.search(btree.root, "15");
        assert btree.search(btree.root, "22");
        assert btree.search(btree.root, "02");
        assert btree.search(btree.root, "07");
        assert btree.search(btree.root, "09");
        btree.delete(btree.root, "02");
        assert btree.toString().equals("07_1,09_1,12_0,15_1,22_1,29_0,31_1,43_1,52_0,56_1,69_1");
        btree.delete(btree.root, "52");
        assert btree.toString().equals("07_1,09_1,12_0,15_1,22_1,29_0,31_1,43_1,56_1,69_1");
        btree.delete(btree.root, "15");
        assert btree.toString().equals("07_1,09_1,12_0,22_1,29_1,31_0,43_1,56_1,69_1"); // Delete non-existing keys
        assert btree.toString().equals("07_1,09_1,12_0,22_1,29_1,31_0,43_1,56_1,69_1");
    }

    public static void deleteTest2() {
        BTreeNode n1 = new BTreeNode(3);
        n1.setValue(0, "01");
        n1.setValue(1, "02");
        n1.setNumOfKeys(2);
        BTreeNode n4 = new BTreeNode(3);
        n4.setValue(0, "04");
        n4.setValue(1, "05");
        n4.setValue(2, "06");
        n4.setNumOfKeys(3);
        BTreeNode n8 = new BTreeNode(3);
        n8.setValue(0, "08");
        n8.setValue(1, "09");
        n8.setValue(2, "10");
        n8.setNumOfKeys(3);
        BTreeNode n12 = new BTreeNode(3);
        n12.setValue(0, "12");
        n12.setValue(1, "13");
        n12.setNumOfKeys(2);
        BTreeNode n15 = new BTreeNode(3);
        n15.setValue(0, "15");
        n15.setValue(1, "16");
        n15.setValue(2, "17");
        n15.setNumOfKeys(3);
        BTreeNode n19 = new BTreeNode(3);
        n19.setValue(0, "19");
        n19.setValue(1, "20");
        n19.setNumOfKeys(2);
        BTreeNode n22 = new BTreeNode(3);
        n22.setValue(0, "22");
        n22.setValue(1, "23");
        n22.setNumOfKeys(2);
        BTreeNode n3 = new BTreeNode(3);
        n3.setValue(0, "03");
        n3.setValue(1, "07");
        n3.setValue(2, "11");
        n3.setChild(0, n1);
        n3.setChild(1, n4);
        n3.setChild(2, n8);
        n3.setChild(3, n12);
        n3.setNumOfKeys(3);
        BTreeNode n18 = new BTreeNode(3);
        n18.setValue(0, "18");
        n18.setValue(1, "21");
        n18.setChild(0, n15);
        n18.setChild(1, n19);
        n18.setChild(2, n22);
        n18.setNumOfKeys(2);
        BTreeNode n14 = new BTreeNode(3);
        n14.setValue(0, "14");
        n14.setChild(0, n3);
        n14.setChild(1, n18);
        n14.setNumOfKeys(1);
        BTree btree = new BTree("3");
        btree.root = n14;
        assert btree.toString().equals("01_2,02_2,03_1,04_2,05_2,06_2,07_1,08_2,09_2,10_2,11_1,12_2,13_2,14_0,15_2,16_2,17_2,18_1,19_2,20_2,21_1,22_2,23_2");
        btree.delete(btree.root, "06");
        assert btree.toString().equals("01_2,02_2,03_1,04_2,05_2,07_1,08_2,09_2,10_2,11_1,12_2,13_2,14_0,15_2,16_2,17_2,18_1,19_2,20_2,21_1,22_2,23_2");
        btree.delete(btree.root, "11");
        assert btree.toString().equals("01_2,02_2,03_1,04_2,05_2,07_1,08_2,09_2,10_1,12_2,13_2,14_0,15_2,16_2,17_2,18_1,19_2,20_2,21_1,22_2,23_2");
        btree.delete(btree.root, "07");
        assert btree.toString().equals("01_2,02_2,03_1,04_2,05_2,08_2,09_2,10_1,12_2,13_2,14_0,15_2,16_2,17_2,18_1,19_2,20_2,21_1,22_2,23_2");
        btree.delete(btree.root, "04");
        assert btree.toString().equals("01_1,02_1,03_0,05_1,08_1,09_1,10_0,12_1,13_1,14_0,15_1,16_1,17_1,18_0,19_1,20_1,21_0,22_1,23_1");
        btree.delete(btree.root, "02");
        assert btree.toString().equals("01_1,03_1,05_0,08_1,09_1,10_0,12_1,13_1,14_0,15_1,16_1,17_1,18_0,19_1,20_1,21_0,22_1,23_1");
    }
}